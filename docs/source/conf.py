# -*- coding: utf-8 -*-
# -- Project information -----------------------------------------------------

project = u'CMakeTest'
copyright = u'2018, Ryan M. Richard'
author = u'Ryan M. Richard'

# The short X.Y version
version = u'1.0.0'
# The full version, including alpha/beta/rc tags
release = u'1.0.0alpha'

# -- Path setup --------------------------------------------------------------

import os
import sys
import subprocess
import urllib.request
dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0,dir_path)

if not os.path.exists("make_tutorial.py"):
    make_tutorial_url = "https://raw.githubusercontent.com/NWChemEx-Project/" \
                        "DeveloperTools/master/scripts/make_tutorials.py"
    urllib.request.urlretrieve(make_tutorial_url, "make_tutorials.py")

from make_tutorials import make_tutorials

doc_path = os.path.dirname(dir_path)
root_path = os.path.dirname(doc_path)
build_path = os.path.join(doc_path, "build")

# -- General configuration ---------------------------------------------------
highlight_language = 'cmake'
templates_path = ['.templates']
source_suffix = '.rst'
master_doc = 'index'
language = None
exclude_patterns = []
pygments_style = 'sphinx'
html_theme = 'sphinx_rtd_theme'
html_static_path = []
htmlhelp_basename = project + 'doc'
extensions = [
    'sphinx.ext.mathjax',
    'sphinx.ext.githubpages',
    'breathe',
    'exhale'
]

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
}


latex_documents = [
    (master_doc, project + '.tex', project+ u'Documentation', author, 'manual'),
]

man_pages = [
    (master_doc,project, project+ u'Documentation', [author], 1)
]

texinfo_documents = [
    (master_doc, project, project + u'Documentation', author, project,
     'One line description of project.', 'Miscellaneous'),
]
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

# -- Breathe and Exhale options ------------------------------------------------

breathe_projects = {
    project: os.path.join(doxy_path, "xml")
}
breathe_default_project = project


def specificationsForKind(kind):
    '''
    For a given input ``kind``, return the list of reStructuredText specifications
    for the associated Breathe directive.
    '''
    # Change the defaults for .. doxygenclass:: and .. doxygenstruct::
    if kind == "class" or kind == "struct":
        return [
            ":members:",
            ":protected-members:",
            ":private-members:",
            ":undoc-members:"
        ]
    # Change the defaults for .. doxygenenum::
    elif kind == "enum":
        return [":no-link:"]
    # An empty list signals to Exhale to use the defaults
    else:
        return []

exhale_args = {
    "containmentFolder": "./api",
    "rootFileName": "index.rst",
    "rootFileTitle": project + " API",
    "doxygenStripFromPath" : "..",
    "createTreeView" : True,
    "minifyTreeView" : False,
    "contentsDirectives": True,
    "kindsWithContentsDirectives": ['function'],
    "exhaleExecutesDoxygen" : False,
    "afterTitleDescription": "These APIs are automatically generated by Doxygen"
                             " + Breathe + Exhale. Because Doxygen does not "
                             "natively support CMake, APIs are shown as Python."
                             "To avoid Doxygen issues, free functions are "
                             "assigned to a class named the same as the "
                             "directory containing them.",
    "customSpecificationsMapping" : utils.makeCustomSpecificationsMapping(
        specificationsForKind
    ),
    "lexerMapping" : {
        r".*\.cmake": "cmake"
    }
}

# -- Generate documentation -------------------------------------------------

examples_dir = os.path.join(root_path, "tests", "tutorials")
tutorial_dir = os.path.join(doc_path,  "source", "tutorials")
make_tutorials(examples_dir, tutorial_dir)

if not os.path.exists(build_path):
    os.mkdir(build_path)

if not os.path.exists(doxy_path):
    os.mkdir(doxy_path)

subprocess.call('doxygen', shell=True)


